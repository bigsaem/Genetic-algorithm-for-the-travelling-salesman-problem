//
// Created by Hysteresis on 2019/3/8.
//

#ifndef ASSIGNMENT2_GENETIC_HPP
#define ASSIGNMENT2_GENETIC_HPP

#include <vector>
#include <set>
#include "city.hpp"
#include "tour.hpp"
#include "randomUtil.hpp"

class genetic {
private:
    //singleton instance
    static genetic instance;
    //master list of cities in current algorithm
    std::vector<const city*> masterList;
    //population of tour used in current algorithm, generated by master list
    std::vector<tour*> population;
    //base distance of current algorithm, set to int max
    double base_distance = INT32_MAX;
    //best distance of current algorithm, set to int max
    double best_distance = INT32_MAX;

    //hidden constructor for singleton
    genetic() = default;

public:
    //define how long a tour should be
    static constexpr int CITY_IN_TOUR = 32;
    //define how many tour should be generated in the algorithm
    static constexpr int POPULATION_SIZE = 32;
    //define the shuffle times when generating a tour.
    static constexpr int SHUFFLES = 64;
    //define the maximum iteration for current algorithm
    static constexpr int ITERATIONS = 1000;
    //define the maximum x and y coord for city
    static constexpr int MAP_BOUNDARY = 1000;
    //define parent pool size for selecting new parents in the algorithm
    static constexpr int PARENT_POOL_SIZE = 5;
    //define number of elite tour in the algorithm
    static constexpr int NUMBER_OF_ELITES = 1;
    //define how many parent should crossover to produce a child
    static constexpr int NUMBER_OF_PARENTS = 3;
    //define the improvement factor as the goal of this algorithm
    static constexpr double IMPROVEMENT_FACTOR = 0.5;

    //enter point of genetic algorithm, call this function to start running.
    void run();

    //shuffle a list of city to generate a tour
    std::vector<const city*> shuffle(std::vector<const city*> list);
    //use random values to create a master list of city
    void createMasterList();
    //shuffle the master list to create a list of tour population
    void createPopulation();
    //every time population is changed, move the best tour to the front as elite
    void moveEliteToFront();
    //select parents from population
    std::vector<tour*> selectParents();
    //for every needed child, select parents and cross them over
    //which will produce a list of new children
    std::vector<tour*> batchCrossover();
    //cross over a list of parent to produce a new child
    tour* crossover(std::vector<tour *> parents);
    //mutate a tour
    void mutate();

    //not allow copy
    genetic(const genetic&) = delete;
    //not allow copy
    void operator=(const genetic&) = delete;
    //delete all dynamic allocated memory
    ~genetic();

    static genetic* getInstance();

};


#endif //ASSIGNMENT2_GENETIC_HPP
